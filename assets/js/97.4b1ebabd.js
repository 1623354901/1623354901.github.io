(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{1161:function(t,s,v){"use strict";v.r(s);var _=v(2),a=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"typescript-类型声明文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-类型声明文件"}},[t._v("#")]),t._v(" TypeScript 类型声明文件")]),t._v(" "),s("p",[t._v("今天几乎所有的 JavaScript 应用都会引入许多第三方库来完成任务需求。\n这些第三方库不管是否是用 TS 编写的，最终都要编译成 JS 代码，才能发布给开发者使用。\n我们知道是 TS 提供了类型，才有了代码提示和类型保护等机制。")]),t._v(" "),s("p",[t._v("但在项目开发中使用第三方库时，你会发现它们几乎都有相应的 TS 类型，这些类型是怎么来的呢? "),s("code",[t._v("类型声明文件")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("类型声明文件：用来为已存在的 JS 库提供类型信息")])])]),t._v(" "),s("p",[t._v("这样在 TS 项目中使用这些库时，就像用 TS 一样，都会有代码提示、类型保护等机制了。")]),t._v(" "),s("ol",[s("li",[t._v("TS 的两种文件类型")]),t._v(" "),s("li",[t._v("类型声明文件的使用说明")])]),t._v(" "),s("h2",{attrs:{id:"ts-中的两种文件类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ts-中的两种文件类型"}},[t._v("#")]),t._v(" TS 中的两种文件类型")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("TS 中有两种文件类型：1 "),s("code",[t._v(".ts")]),t._v(" 文件 2 "),s("code",[t._v(".d.ts")]),t._v(" 文件")])]),t._v(" "),s("li",[s("p",[t._v(".ts 文件:")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("既包含类型信息又可执行代码")])]),t._v(" "),s("li",[t._v("可以被编译为 .js 文件，然后，执行代码")]),t._v(" "),s("li",[t._v("用途：编写程序代码的地方")])])]),t._v(" "),s("li",[s("p",[t._v(".d.ts 文件:")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("只包含类型信息")]),t._v("的类型声明文件")]),t._v(" "),s("li",[s("strong",[t._v("不会生成 .js 文件，仅用于提供类型信息")])]),t._v(" "),s("li",[t._v("用途：为 JS 提供类型信息")])])]),t._v(" "),s("li",[s("p",[t._v("总结：.ts 是 "),s("code",[t._v("implementation")]),t._v("(代码实现文件)；"),s("strong",[t._v(".d.ts 是 declaration(类型声明文件)")])])]),t._v(" "),s("li",[s("p",[t._v("如果要为 JS 库提供类型信息，要使用 "),s("code",[t._v(".d.ts")]),t._v(" 文件")])])]),t._v(" "),s("h2",{attrs:{id:"类型声明文件的使用说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型声明文件的使用说明"}},[t._v("#")]),t._v(" 类型声明文件的使用说明")]),t._v(" "),s("ul",[s("li",[t._v("在使用 TS 开发项目时，类型声明文件的使用包括以下两种方式:\n"),s("ol",[s("li",[t._v("使用已有的类型声明文件")]),t._v(" "),s("li",[t._v("创建自己的类型声明文件")])])]),t._v(" "),s("li",[t._v("学习顺序:先会用(别人的)再会写(自己的)")])]),t._v(" "),s("h3",{attrs:{id:"使用已有的类型声明文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用已有的类型声明文件"}},[t._v("#")]),t._v(" 使用已有的类型声明文件")]),t._v(" "),s("ol",[s("li",[t._v("内置类型声明文件")]),t._v(" "),s("li",[t._v("第三方库的类型声明文件")])]),t._v(" "),s("h4",{attrs:{id:"内置类型声明文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置类型声明文件"}},[t._v("#")]),t._v(" 内置类型声明文件")]),t._v(" "),s("ul",[s("li",[t._v("TS 为 JS 运行时可用的所有标准化内置 API 都提供了声明文件")]),t._v(" "),s("li",[t._v("比如，在使用数组时，数组所有方法都会有相应的代码提示以及类型信息:")])]),t._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" strs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 鼠标放在 forEach 上查看类型")]),t._v("\nstrs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("forEach\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ul",[s("li",[t._v("实际上这都是 TS 提供的内置类型声明文件")]),t._v(" "),s("li",[t._v("可以通过 Ctrl + 鼠标左键(Mac：Command + 鼠标左键)来查看内置类型声明文件内容")]),t._v(" "),s("li",[t._v("比如，查看 forEach 方法的类型声明，在 VSCode 中会自动跳转到 "),s("code",[t._v("lib.es5.d.ts")]),t._v(" 类型声明文件中")]),t._v(" "),s("li",[t._v("当然，像 window、document 等 BOM、DOM API 也都有相应的类型声明("),s("code",[t._v("lib.dom.d.ts")]),t._v(")")])]),t._v(" "),s("h4",{attrs:{id:"第三方库的类型声明文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三方库的类型声明文件"}},[t._v("#")]),t._v(" 第三方库的类型声明文件")]),t._v(" "),s("ul",[s("li",[t._v("目前，几乎所有常用的第三方库都有相应的类型声明文件")]),t._v(" "),s("li",[t._v("第三方库的类型声明文件有两种存在形式:1 库自带类型声明文件 2 由 DefinitelyTyped 提供。")])]),t._v(" "),s("ol",[s("li",[t._v("库自带类型声明文件：比如，axios")])]),t._v(" "),s("ul",[s("li",[t._v("查看 "),s("code",[t._v("node_modules/axios")]),t._v(" 目录")])]),t._v(" "),s("p",[t._v("解释：这种情况下，正常导入该库，"),s("strong",[t._v("TS 就会自动加载库自己的类型声明文件")]),t._v("，以提供该库的类型声明。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("由 DefinitelyTyped 提供")])]),t._v(" "),s("ul",[s("li",[t._v("DefinitelyTyped 是一个 github 仓库，用来提供高质量 TypeScript 类型声明")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"}},[t._v("DefinitelyTyped 链接"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("可以通过 npm/yarn 来下载该仓库提供的 TS 类型声明包，这些包的名称格式为:"),s("code",[t._v("@types/*")])]),t._v(" "),s("li",[t._v("比如，@types/react、@types/lodash 等")]),t._v(" "),s("li",[t._v("说明：在实际项目开发时，如果你使用的第三方库没有自带的声明文件，VSCode 会给出明确的提示")])]),t._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" _ "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lodash'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 VSCode 中，查看 'lodash' 前面的提示")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ul",[s("li",[t._v("解释：当安装 "),s("code",[t._v("@types/*")]),t._v(" 类型声明包后，"),s("strong",[t._v("TS 也会自动加载该类声明包")]),t._v("，以提供该库的类型声明")]),t._v(" "),s("li",[t._v("补充：TS 官方文档提供了一个页面，可以来查询 @types/* 库")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.typescriptlang.org/dt",target:"_blank",rel:"noopener noreferrer"}},[t._v("@types/* 库"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"创建自己的类型声明文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建自己的类型声明文件"}},[t._v("#")]),t._v(" 创建自己的类型声明文件")]),t._v(" "),s("ol",[s("li",[t._v("项目内共享类型")]),t._v(" "),s("li",[t._v("为已有 JS 文件提供类型声明")])]),t._v(" "),s("h4",{attrs:{id:"项目内共享类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目内共享类型"}},[t._v("#")]),t._v(" 项目内共享类型")]),t._v(" "),s("ul",[s("li",[t._v("如果多个 .ts 文件中都用到同一个类型，此时可以创建 .d.ts 文件提供该类型，实现类型共享。")]),t._v(" "),s("li",[t._v("操作步骤:\n"),s("ol",[s("li",[t._v("创建 index.d.ts 类型声明文件。")]),t._v(" "),s("li",[t._v("创建需要共享的类型，并使用 export 导出(TS 中的类型也可以使用 import/export 实现模块化功能)。")]),t._v(" "),s("li",[t._v("在需要使用共享类型的 .ts 文件中，通过 import 导入即可(.d.ts 后缀导入时，直接省略)。")])])])]),t._v(" "),s("h4",{attrs:{id:"为已有-js-文件提供类型声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为已有-js-文件提供类型声明"}},[t._v("#")]),t._v(" 为已有 JS 文件提供类型声明")]),t._v(" "),s("ol",[s("li",[t._v("在将 JS 项目迁移到 TS 项目时，为了让已有的 .js 文件有类型声明。")]),t._v(" "),s("li",[t._v("成为库作者，创建库给其他人使用。")])]),t._v(" "),s("ul",[s("li",[t._v("注意:类型声明文件的编写与模块化方式相关，不同的模块化方式有不同的写法。但由于历史原因，JS 模块化的发展 经历过多种变化(AMD、CommonJS、UMD、ESModule 等)，而 TS 支持各种模块化形式的类型声明。这就导致 ，类型声明文件相关内容又多又杂。")]),t._v(" "),s("li",[t._v("演示:基于最新的 ESModule(import/export)来为已有 .js 文件，创建类型声明文件。 开发环境准备:使用 webpack 搭建，通过 ts-loader 处理 .ts 文件。")])]),t._v(" "),s("h4",{attrs:{id:"类型声明文件的使用说明-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型声明文件的使用说明-2"}},[t._v("#")]),t._v(" 类型声明文件的使用说明")]),t._v(" "),s("ul",[s("li",[t._v("说明:TS 项目中也可以使用 .js 文件。")]),t._v(" "),s("li",[t._v("说明:在导入 .js 文件时，TS 会自动加载与 .js 同名的 .d.ts 文件，以提供类型声明。")]),t._v(" "),s("li",[t._v("declare 关键字:用于类型声明，为其他地方(比如，.js 文件)已存在的变量声明类型，而不是创建一个新的变量。\n"),s("ol",[s("li",[t._v("对于 type、interface 等这些明确就是 TS 类型的(只能在 TS 中使用的)，可以省略 declare 关键字。")]),t._v(" "),s("li",[t._v("对于 let、function 等具有双重含义(在 JS、TS 中都能用)，应该使用 declare 关键字，明确指定此处用于类型声明。")])])])])])}),[],!1,null,null,null);s.default=a.exports}}]);