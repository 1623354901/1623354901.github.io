(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{1010:function(t,s,a){t.exports=a.p+"assets/img/1.5a4d2637.png"},1011:function(t,s,a){t.exports=a.p+"assets/img/2.feb8c645.png"},1012:function(t,s,a){t.exports=a.p+"assets/img/3.5a64c4f5.png"},1013:function(t,s,a){t.exports=a.p+"assets/img/4.684bcb42.png"},1014:function(t,s,a){t.exports=a.p+"assets/img/5.c6756f94.png"},1015:function(t,s,a){t.exports=a.p+"assets/img/6.b622b83a.png"},1016:function(t,s,a){t.exports=a.p+"assets/img/7.6c88d233.png"},1017:function(t,s,a){t.exports=a.p+"assets/img/8.19b37ba0.png"},1018:function(t,s,a){t.exports=a.p+"assets/img/9.36ea7bc4.png"},1019:function(t,s,a){t.exports=a.p+"assets/img/10.de94a949.png"},1020:function(t,s,a){t.exports=a.p+"assets/img/11.68bec3c5.png"},1021:function(t,s,a){t.exports=a.p+"assets/img/12.8c0eb2a3.png"},1022:function(t,s,a){t.exports=a.p+"assets/img/13.3be8b7d0.png"},1023:function(t,s,a){t.exports=a.p+"assets/img/14.ce8279e8.png"},1024:function(t,s,a){t.exports=a.p+"assets/img/15.66f815e9.png"},1025:function(t,s,a){t.exports=a.p+"assets/img/16.c81921c8.png"},1026:function(t,s,a){t.exports=a.p+"assets/img/17.3d719ded.png"},1027:function(t,s,a){t.exports=a.p+"assets/img/18.c0fd5460.png"},1028:function(t,s,a){t.exports=a.p+"assets/img/19.a77c9a88.png"},1029:function(t,s,a){t.exports=a.p+"assets/img/20.c600da93.png"},1030:function(t,s,a){t.exports=a.p+"assets/img/21.8c1aab75.png"},1031:function(t,s,a){t.exports=a.p+"assets/img/22.7a7e7c85.png"},1032:function(t,s,a){t.exports=a.p+"assets/img/23.259d1275.png"},1033:function(t,s,a){t.exports=a.p+"assets/img/24.3d752ec2.png"},1034:function(t,s,a){t.exports=a.p+"assets/img/25.382f55e4.png"},1035:function(t,s,a){t.exports=a.p+"assets/img/26.ded0ebd7.png"},1036:function(t,s,a){t.exports=a.p+"assets/img/27.ee5e1978.png"},1037:function(t,s,a){t.exports=a.p+"assets/img/28.49161ccf.png"},1038:function(t,s,a){t.exports=a.p+"assets/img/29.79a42c3c.png"},1039:function(t,s,a){t.exports=a.p+"assets/img/30.59292c41.png"},1040:function(t,s,a){t.exports=a.p+"assets/img/31.3b24fc99.png"},1041:function(t,s,a){t.exports=a.p+"assets/img/32.a560e14c.png"},1042:function(t,s,a){t.exports=a.p+"assets/img/33.a85fdf5f.png"},1043:function(t,s,a){t.exports=a.p+"assets/img/34.18fb3fef.png"},1044:function(t,s,a){t.exports=a.p+"assets/img/36.687a2cd0.png"},1045:function(t,s,a){t.exports=a.p+"assets/img/37.85bea62a.png"},1046:function(t,s,a){t.exports=a.p+"assets/img/38.f519bb3e.png"},1047:function(t,s,a){t.exports=a.p+"assets/img/39.90c7dfcb.png"},1048:function(t,s,a){t.exports=a.p+"assets/img/40.366a36c5.png"},1049:function(t,s,a){t.exports=a.p+"assets/img/41.10e64952.png"},1050:function(t,s,a){t.exports=a.p+"assets/img/42.8d140810.png"},1051:function(t,s,a){t.exports=a.p+"assets/img/43.35519e82.png"},1052:function(t,s,a){t.exports=a.p+"assets/img/44.eb639ef1.png"},1053:function(t,s,a){t.exports=a.p+"assets/img/45.69e7b1e0.png"},1054:function(t,s,a){t.exports=a.p+"assets/img/46.357d3f1e.png"},1055:function(t,s,a){t.exports=a.p+"assets/img/47.9a15597e.png"},1056:function(t,s,a){t.exports=a.p+"assets/img/48.a0122aac.png"},1057:function(t,s,a){t.exports=a.p+"assets/img/49.9637114c.png"},1058:function(t,s,a){t.exports=a.p+"assets/img/50.a10a3e48.png"},1059:function(t,s,a){t.exports=a.p+"assets/img/51.0c2af0e6.png"},1060:function(t,s,a){t.exports=a.p+"assets/img/52.ba4aace4.png"},1061:function(t,s,a){t.exports=a.p+"assets/img/53.28e35cd0.png"},1062:function(t,s,a){t.exports=a.p+"assets/img/54.feb42d23.png"},1063:function(t,s,a){t.exports=a.p+"assets/img/55.ed60f76f.png"},1064:function(t,s,a){t.exports=a.p+"assets/img/56.1dfb5dd1.png"},1065:function(t,s,a){t.exports=a.p+"assets/img/57.0027f3ee.png"},1066:function(t,s,a){t.exports=a.p+"assets/img/58.94690418.png"},1067:function(t,s,a){t.exports=a.p+"assets/img/59.90f6c9b7.png"},1068:function(t,s,a){t.exports=a.p+"assets/img/60.f6231ebe.png"},1069:function(t,s,a){t.exports=a.p+"assets/img/61.2fe343d0.png"},1070:function(t,s,a){t.exports=a.p+"assets/img/62.13a85d45.png"},1071:function(t,s,a){t.exports=a.p+"assets/img/63.936ed9f0.png"},1072:function(t,s,a){t.exports=a.p+"assets/img/64.8b5d70db.png"},1073:function(t,s,a){t.exports=a.p+"assets/img/65.9df306fd.png"},1074:function(t,s,a){t.exports=a.p+"assets/img/66.c9000173.png"},1075:function(t,s,a){t.exports=a.p+"assets/img/67.a1b2cd27.png"},1185:function(t,s,a){"use strict";a.r(s);var _=a(2),r=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"_1、python-的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、python-的特点"}},[t._v("#")]),t._v(" 1、Python 的特点")]),t._v(" "),s("p",[t._v("Python 之所以受到大家的欢迎，是因为它有很多优秀“品质”。")]),t._v(" "),s("ol",[s("li",[t._v("简单、易学、免费、开源：Python 简单、易学。我们可以自由发\n布其复制版本，阅读、修改其源代码，将其（部分）用于新软件中。")]),t._v(" "),s("li",[t._v("解释型：Python 是边解释边执行的，Python 解释器会将源代码转\n换为中间字节码形式，然后将其解释为机器语言并执行。")]),t._v(" "),s("li",[t._v("可移植：Python 解释器已被移植在许多平台上，Python 程序无须\n经过修改就可以在多个平台上运行。")]),t._v(" "),s("li",[t._v("代码规范：Python 所采用的强制缩进的方式，使得其代码具有极\n佳的可读性。")]),t._v(" "),s("li",[t._v("面向对象：与 C++和 Java 等相比，Python 以强大而简单的方式实\n现了面向对象编程。")]),t._v(" "),s("li",[t._v("胶水语言：标准版本的 Python 调用 C 语言，并可以借助 C 语言的接\n口驱动调用所有编程语言。")]),t._v(" "),s("li",[t._v("丰富的库：Python 的标准库种类繁多，可以帮助处理各种工作，\n我们不需要安装就可以直接使用这些库。")]),t._v(" "),s("li",[t._v("动态类型：Python 不会检查数据类型，在声明变量时不需要指定\n数据类型。")])]),t._v(" "),s("h3",{attrs:{id:"二、编程基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、编程基础"}},[t._v("#")]),t._v(" 二、编程基础")]),t._v(" "),s("h4",{attrs:{id:"_2-1-标识符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-标识符"}},[t._v("#")]),t._v(" 2.1 标识符")]),t._v(" "),s("p",[t._v("标识符就是变量、函数、属性、类、模块等可以由程序员指定名称的代码元素。\n构成标识符的字符均遵循一定的命名规则。")]),t._v(" "),s("blockquote",[s("p",[t._v("Python 中标识符的命名规则如下。")])]),t._v(" "),s("ol",[s("li",[t._v("区分大小写：Myname 与 myname 是两个不同的标识符。")]),t._v(" "),s("li",[t._v("首字符可以是下画线（_）或字母，但不能是数字。")]),t._v(" "),s("li",[t._v("除首字符外的其他字符必须是下画线、字母和数字。")]),t._v(" "),s("li",[t._v("关键字不能作为标识符。")]),t._v(" "),s("li",[t._v("不要使用 Python 的内置函数作为自己的标识符。")])]),t._v(" "),s("blockquote",[s("p",[t._v("在很多编程语言中，中文等亚洲文字都可以作为标识符，在 Python 中也可以吗?\n可以。因为 Python 3 的字符采用了双字节 Unicode 编码。Unicode 叫作统一编码制，包含了亚洲文字编码，如中文、日文、韩文等字符。\n注 Unicode 是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。")])]),t._v(" "),s("h4",{attrs:{id:"_2-2-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-关键字"}},[t._v("#")]),t._v(" 2.2 关键字")]),t._v(" "),s("p",[t._v("关键字是由语言本身定义好的有特殊含义的代码元素。\n"),s("img",{attrs:{src:a(1010)}})]),t._v(" "),s("h4",{attrs:{id:"_2-3-变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-变量"}},[t._v("#")]),t._v(" 2.3 变量")]),t._v(" "),s("p",[t._v("在 Python 中为一个变量赋值的同时就声明了该变量，该变量的数据类型就是赋值数据所属的类型，该变量还可以接收其他类型的数据。\n"),s("img",{attrs:{src:a(1011)}}),t._v(" "),s("img",{attrs:{src:a(1012)}})]),t._v(" "),s("h4",{attrs:{id:"_2-4-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-语句"}},[t._v("#")]),t._v(" 2.4 语句")]),t._v(" "),s("p",[t._v("Python 代码是由关键字、标识符、表达式和语句等构成的，语句是代码的重要组成部分。\n在 Python 中，一行代码表示一条语句，在一般情况下语句结束时不加分号。示例代码：\n"),s("img",{attrs:{src:a(1013)}})]),t._v(" "),s("h4",{attrs:{id:"_2-5-代码注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-代码注释"}},[t._v("#")]),t._v(" 2.5 代码注释")]),t._v(" "),s("p",[t._v("在使用＃（井号）时，＃位于注释行的开头，＃后面有一个空格，接着是注释的内容。\n"),s("img",{attrs:{src:a(1014)}}),t._v(" "),s("img",{attrs:{src:a(1015)}})]),t._v(" "),s("h4",{attrs:{id:"_2-6-模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-模块"}},[t._v("#")]),t._v(" 2.6 模块")]),t._v(" "),s("p",[t._v("在 Python 中一个模块就是一个文件，模块是保存代码的最小单位，在模块中可以声明变量、函数、属性和类等 Python 代码元素。\n"),s("img",{attrs:{src:a(1016)}})]),t._v(" "),s("blockquote",[s("p",[t._v("import ＜模块名＞：通过这种方式会导入 m2 模块的所有代码元素,在访问时需要加前缀“m2.”")])]),t._v(" "),s("img",{attrs:{src:a(1017)}}),t._v("\n> from＜模块名＞import＜代码元素＞：通过这种方式会导入m2中的x变量，在访问时不需要加前缀“m2.”\n"),s("img",{attrs:{src:a(1018)}}),t._v(" "),s("blockquote",[s("p",[t._v("from ＜模块名＞ import ＜代码元素＞ as ＜代码元素别名＞：与 ② 类似，在当前 m1 模块的代码元素（x 变量）与要导入的 m2 模块的代码元素（x 变量）名称有冲突时，可以给要导入的代码元素（m2 中的 x）一个别名 x2")])]),t._v(" "),s("h3",{attrs:{id:"三、第-3-章-数字类型的数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、第-3-章-数字类型的数据"}},[t._v("#")]),t._v(" 三、第 3 章 数字类型的数据")]),t._v(" "),s("h4",{attrs:{id:"_3-1-python-中的数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-python-中的数据类型"}},[t._v("#")]),t._v(" 3.1 Python 中的数据类型")]),t._v(" "),s("p",[t._v("在 Python 中所有的数据类型都是类，每个数据值都是类的“实例”。"),s("br"),t._v("\n在 Python 中有 6 种主要的内置数据类型："),s("code",[t._v("数字、字符串、列表、元组、集合和字典")]),t._v("。"),s("code",[t._v("列表、元组、集合和字典")]),t._v("可以容纳多项数据，在本书中把它们统称为"),s("code",[t._v("容器类型")]),t._v("的数据。"),s("br"),t._v("\nPython 中的数字类型有 4 种："),s("code",[t._v("整数类型、浮点类型、复数类型和布尔类型")]),t._v("。需要注意的是，布尔类型也是数字类型，它事实上是整数类型\n的一种。"),s("br")]),t._v(" "),s("h4",{attrs:{id:"_3-2-整数类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-整数类型"}},[t._v("#")]),t._v(" 3.2 整数类型")]),t._v(" "),s("p",[t._v("Python 中的"),s("code",[t._v("整数类型")]),t._v("为"),s("code",[t._v("int类")]),t._v("，整数类型的范围可以很大，表示很大的整数，只受所在计算机硬件的限制。\n"),s("img",{attrs:{src:a(1019)}})]),t._v(" "),s("h4",{attrs:{id:"_3-3-浮点类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-浮点类型"}},[t._v("#")]),t._v(" 3.3 浮点类型")]),t._v(" "),s("p",[t._v("浮点类型主要用来存储"),s("code",[t._v("小数数值")]),t._v("，Python 的浮点类型为"),s("code",[t._v("float类")]),t._v("。Python 只支持"),s("code",[t._v("双精度浮点类型")]),t._v("，而且是与本机相关的。\n"),s("img",{attrs:{src:a(1020)}})]),t._v(" "),s("h4",{attrs:{id:"_3-4-复数类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-复数类型"}},[t._v("#")]),t._v(" 3.4 复数类型")]),t._v(" "),s("p",[t._v("整数和浮点数（小数）在数学中被统称为"),s("code",[t._v("实数")]),t._v("。与实数对应的是"),s("code",[t._v("复数")]),t._v("，复数在数学中被表示为："),s("code",[t._v("a+bi")]),t._v("，其中 "),s("code",[t._v("a 被称为实部，b 被称为虚部，i 被称为虚数单位")]),t._v("。复数在数学、理论物理学和电气工程等方面应用广泛，例如向量就可以使用复数表示\n"),s("img",{attrs:{src:a(1021)}})]),t._v(" "),s("h4",{attrs:{id:"_3-5-布尔类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-布尔类型"}},[t._v("#")]),t._v(" 3.5 布尔类型")]),t._v(" "),s("p",[t._v("Python 中的布尔类型为"),s("code",[t._v("bool类")]),t._v("，"),s("code",[t._v("bool是int的子类")]),t._v("，它只有两个值: "),s("code",[t._v("True和False")]),t._v("。\n"),s("img",{attrs:{src:a(1022)}}),t._v(" "),s("img",{attrs:{src:a(1023)}})]),t._v(" "),s("h4",{attrs:{id:"_3-6-数字类型的相互转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-数字类型的相互转换"}},[t._v("#")]),t._v(" 3.6 数字类型的相互转换")]),t._v(" "),s("blockquote",[s("p",[t._v("Python 中的很多数据类型都可以相互转换，但是具体情况比较复杂，本章重点介绍数字类型之间的相互转换。\n在 Python 的数字类型中，除复数外，其他三种数字类型如整数、浮点和布尔都可以相互转换，分为隐式类型的转换和显式类型的转换。")])]),t._v(" "),s("h5",{attrs:{id:"_3-6-1-隐式类型的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-1-隐式类型的转换"}},[t._v("#")]),t._v(" 3.6.1 隐式类型的转换")]),t._v(" "),s("p",[t._v("数字之间可以进行数学计算，在进行数学计算时若数字类型不同，则会发生隐式类型的转换。\n"),s("img",{attrs:{src:a(1024)}}),t._v(" "),s("img",{attrs:{src:a(1025)}})]),t._v(" "),s("h5",{attrs:{id:"_3-6-2-显式类型的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-2-显式类型的转换"}},[t._v("#")]),t._v(" 3.6.2 显式类型的转换")]),t._v(" "),s("blockquote",[s("p",[t._v("表达式 1.0 + 1 中的整数 1 被隐式转换为浮点数 1.0，但在很多情况下我都希望浮点数 1.0 被转换为整数 1，该怎么办?\n在这种情况下就需要使用转换函数进行显式转换了。除复数外，三种数字类型如"),s("code",[t._v("整数、浮点和布尔")]),t._v("都有自己的转换函数，分别是"),s("code",[t._v("int()、float() 和 bool()")]),t._v(" 函数，\n"),s("img",{attrs:{src:a(1026)}})])]),t._v(" "),s("h3",{attrs:{id:"四、第-4-章-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、第-4-章-运算符"}},[t._v("#")]),t._v(" 四、第 4 章 运算符")]),t._v(" "),s("h4",{attrs:{id:"_4-1-算术运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-算术运算符"}},[t._v("#")]),t._v(" 4.1 算术运算符")]),t._v(" "),s("p",[t._v("算术运算符用于组织整数类型和浮点类型的数据，有"),s("code",[t._v("一元运算符")]),t._v("和"),s("code",[t._v("二元运算符")]),t._v("之分。一元算术运算符有两个："),s("code",[t._v("+（正号）和-（负号）")]),t._v("，例如：+a 还是 a，-a 是对 a 的取反运算。\n"),s("img",{attrs:{src:a(1027)}}),t._v(" "),s("img",{attrs:{src:a(1028)}})]),t._v(" "),s("h4",{attrs:{id:"_4-2-比较运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-比较运算符"}},[t._v("#")]),t._v(" 4.2 比较运算符")]),t._v(" "),s("p",[t._v("比较运算符用于比较两个表达式的大小，其结果是布尔类型的数据，即"),s("code",[t._v("True")]),t._v("或"),s("code",[t._v("False")]),t._v("。\n"),s("img",{attrs:{src:a(1029)}}),t._v(" "),s("img",{attrs:{src:a(1030)}})]),t._v(" "),s("blockquote",[s("p",[t._v("数字类型的数据可以使用比较运算符进行比较，其他类型的数据也可以吗?\n比较运算符可用于任意类型的数据，但参与比较的两种类型的数据要相互兼容，即能进行隐式转换。例如: 整数、浮点和布尔这三种类型是相互兼容的")])]),t._v(" "),s("img",{attrs:{src:a(1031)}}),t._v(" "),s("h4",{attrs:{id:"_4-3-逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-逻辑运算符"}},[t._v("#")]),t._v(" 4.3 逻辑运算符")]),t._v(" "),s("p",[t._v("逻辑运算符用于对布尔型变量进行运算，其结果也是布尔型\n"),s("img",{attrs:{src:a(1032)}}),t._v(" "),s("img",{attrs:{src:a(1033)}}),t._v(" "),s("img",{attrs:{src:a(1034)}})]),t._v(" "),s("h4",{attrs:{id:"_4-4-位运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-位运算符"}},[t._v("#")]),t._v(" 4.4 位运算符")]),t._v(" "),s("p",[s("code",[t._v("位运算")]),t._v("是以二进位（bit）为单位进行运算的，"),s("code",[t._v("操作数和结果")]),t._v("都是"),s("code",[t._v("整数类型")]),t._v("的数据。\n"),s("img",{attrs:{src:a(1035)}}),t._v(" "),s("img",{attrs:{src:a(1036)}}),t._v(" "),s("img",{attrs:{src:a(1037)}})]),t._v(" "),s("h4",{attrs:{id:"_4-5-赋值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-赋值运算符"}},[t._v("#")]),t._v(" 4.5 赋值运算符")]),t._v(" "),s("img",{attrs:{src:a(1038)}}),t._v(" "),s("img",{attrs:{src:a(1039)}}),t._v(" "),s("img",{attrs:{src:a(1040)}}),t._v(" "),s("h4",{attrs:{id:"_4-6-运算符的优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-运算符的优先级"}},[t._v("#")]),t._v(" 4.6 运算符的优先级")]),t._v(" "),s("img",{attrs:{src:a(1041)}}),t._v(" "),s("img",{attrs:{src:a(1042)}}),t._v(" "),s("img",{attrs:{src:a(1043)}}),t._v(" "),s("h3",{attrs:{id:"五、第-5-章-程序流程控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、第-5-章-程序流程控制"}},[t._v("#")]),t._v(" 五、第 5 章 程序流程控制")]),t._v(" "),s("p",[t._v("分支语句，跳转语句，循环语句")]),t._v(" "),s("h4",{attrs:{id:"_5-1-分支语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-分支语句"}},[t._v("#")]),t._v(" 5.1 分支语句")]),t._v(" "),s("blockquote",[s("p",[t._v("我很熟悉分支语句，它也被称为条件语句，Java 和 C 等很多编程语言都有判断语句 if 和多分支语句 switch，在 Python 中也有吗?\nPython 的设计理念是简单、刚好够用，所以在 Python 中没有 switch 语句，多分支功能是通过 if-elif-else 实现的。")])]),t._v(" "),s("img",{attrs:{src:a(1044)}}),t._v(" "),s("img",{attrs:{src:a(375)}}),t._v(" "),s("img",{attrs:{src:a(1045)}}),t._v(" "),s("img",{attrs:{src:a(1046)}}),t._v(" "),s("img",{attrs:{src:a(1047)}}),t._v(" "),s("img",{attrs:{src:a(375)}}),t._v(" "),s("h4",{attrs:{id:"_5-2-循环语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-循环语句"}},[t._v("#")]),t._v(" 5.2 循环语句")]),t._v(" "),s("p",[t._v("Python 支持两种循环语句：while 和 for。")]),t._v(" "),s("h5",{attrs:{id:"_5-2-1-while-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-while-语句"}},[t._v("#")]),t._v(" 5.2.1 while 语句")]),t._v(" "),s("blockquote",[s("p",[t._v("在 Java 和 C 中都有 while 和 do-while 语句，在 Python 中也有吗?\n在 Python 中只有 while 语句，没有 do-while 语句。while 语句先判断循环条件，若条件为 True 则执行循环体。"),s("br")])]),t._v(" "),s("img",{attrs:{src:a(1048)}}),t._v(" "),s("img",{attrs:{src:a(1049)}}),t._v(" "),s("img",{attrs:{src:a(1050)}}),t._v(" "),s("img",{attrs:{src:a(1051)}}),t._v(" "),s("h5",{attrs:{id:"_5-2-2-for-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2-for-语句"}},[t._v("#")]),t._v(" 5.2.2 for 语句")]),t._v(" "),s("img",{attrs:{src:a(1052)}}),t._v(" "),s("img",{attrs:{src:a(1053)}}),t._v(" "),s("img",{attrs:{src:a(1054)}}),t._v(" "),s("h4",{attrs:{id:"_5-3-跳转语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-跳转语句"}},[t._v("#")]),t._v(" 5.3 跳转语句")]),t._v(" "),s("blockquote",[s("p",[t._v("跳转语句能够改变程序的执行顺序，包括 break、continue 和 return。"),s("code",[t._v("break 和 continue 用于循环体")]),t._v("中，而 return 用于函数中。本节先介绍 break 和 continue 语句，对于 return 语句，将在后面的章节中介绍。"),s("br")])]),t._v(" "),s("h5",{attrs:{id:"_5-3-1-break-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-1-break-语句"}},[t._v("#")]),t._v(" 5.3.1 break 语句")]),t._v(" "),s("p",[t._v("break 语句用于强行退出循环体，不再执行循环体中剩余的语句"),s("br"),t._v(" "),s("img",{attrs:{src:a(1055)}})]),t._v(" "),s("h5",{attrs:{id:"_5-3-2-continue-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-2-continue-语句"}},[t._v("#")]),t._v(" 5.3.2 continue 语句")]),t._v(" "),s("p",[t._v("continue 语句用于"),s("code",[t._v("结束本次循环")]),t._v("，"),s("code",[t._v("跳过循环体中尚未执行的语句，接着进行终止条件的判断，以决定是否继续循环")]),t._v("。"),s("br"),t._v(" "),s("img",{attrs:{src:a(1056)}})]),t._v(" "),s("h3",{attrs:{id:"六、第-6-章-容器类型的数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、第-6-章-容器类型的数据"}},[t._v("#")]),t._v(" 六、第 6 章 容器类型的数据")]),t._v(" "),s("p",[t._v("若我们想将多个数据打包并且统一管理，应该怎么办？\nPython 内置的数据类型如"),s("code",[t._v("序列（列表、元组等）、集合和字典")]),t._v("等可以容纳多项数据，我们称它们为容器类型的数据。")]),t._v(" "),s("h4",{attrs:{id:"_6-1-序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-序列"}},[t._v("#")]),t._v(" 6.1 序列")]),t._v(" "),s("p",[t._v("序列（sequence）是一种"),s("code",[t._v("可迭代的、元素有序")]),t._v("的容器类型的数据。\n序列包括"),s("code",[t._v("列表（list）、字符串（str）、元组（tuple）和字节序列（bytes）")]),t._v("等。")]),t._v(" "),s("h5",{attrs:{id:"_6-1-1-序列的索引操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-1-序列的索引操作"}},[t._v("#")]),t._v(" 6.1.1 序列的索引操作")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1057)}}),s("br"),t._v("\n序列中的元素都是有序的，每一个元素都带有序号，这个序号叫作索引。索引有正值索引和负值索引之分。"),s("br"),t._v("\n我们是通过下标运算符访问序列中的元素的，下标运算符是跟在容器数据后的一对中括号（[]），中括号带有参数，对于序列类型的数据，这个参数就是元素的索引序号。\n"),s("img",{attrs:{src:a(1058)}})]),t._v(" "),s("h5",{attrs:{id:"_6-1-2-加和乘操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-2-加和乘操作"}},[t._v("#")]),t._v(" 6.1.2 加和乘操作")]),t._v(" "),s("p",[t._v("加（+）和乘（ * ）运算符也可以用于序列中的元素操作。加（+）运算符可以将两个序列连接起来，乘（_）运算符可以将两个序列重复多次。"),s("br"),t._v(" "),s("img",{attrs:{src:a(1059)}})]),t._v(" "),s("h5",{attrs:{id:"_6-1-3-切片操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-3-切片操作"}},[t._v("#")]),t._v(" 6.1.3 切片操作")]),t._v(" "),s("p",[t._v("序列的切片（Slicing）就是从序列中切分出小的子序列。"),s("br"),t._v("\n切片运算符的语法形式为[start：end：step]。其中，"),s("code",[t._v("start是开始索引，end是结束索引，step是步长")]),t._v("（切片时获取的元素的间隔，可以为正整数，也可以为负整数）。"),s("br"),t._v("\n切下的小切片包括 start 位置的元素，但不包括 end 位置的元素，start 和 end 都可以省略"),s("br"),t._v(" "),s("img",{attrs:{src:a(1060)}}),t._v("\n下面对字符串变量 a 进行切片操作[0：3：2]，开始索引为 0，结束索引为 3，步长为 2。\n我们在 Python Shell 中运行没有省略步长的示例代码，看看运行结果怎样。\n"),s("img",{attrs:{src:a(1061)}})]),t._v(" "),s("h5",{attrs:{id:"_6-1-4-成员测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-4-成员测试"}},[t._v("#")]),t._v(" 6.1.4 成员测试")]),t._v(" "),s("p",[t._v("成员测试运算符有两个："),s("code",[t._v("in")]),t._v("和"),s("code",[t._v("not in")]),t._v("，"),s("code",[t._v("in用于测试是否包含某一个元素")]),t._v("，"),s("code",[t._v("not in用于测试是否不包含某一个元素")]),s("br"),t._v(" "),s("img",{attrs:{src:a(1062)}})]),t._v(" "),s("h4",{attrs:{id:"_6-2-列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-列表"}},[t._v("#")]),t._v(" 6.2 列表")]),t._v(" "),s("p",[t._v("列表（list）是一种"),s("code",[t._v("可变序列类型")]),t._v("，我们可以"),s("code",[t._v("追加、插入、删除和替换")]),t._v("列表中的元素。"),s("br")]),t._v(" "),s("h5",{attrs:{id:"_6-2-1-创建列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-1-创建列表"}},[t._v("#")]),t._v(" 6.2.1 创建列表")]),t._v(" "),s("p",[t._v("创建列表有两种方法。")]),t._v(" "),s("ol",[s("li",[t._v("list（iterable）函数：参数 iterable 是可迭代对象（"),s("code",[t._v("字符串、列表、元组、集合和字典")]),t._v("等）。")]),t._v(" "),s("li",[t._v("[元素 1，元素 2，元素 3，⋯]：指定具体的列表元素，元素之间以逗号分隔，列表元素需要使用中括号括起来")])]),t._v(" "),s("img",{attrs:{src:a(1063)}}),t._v(" "),s("h4",{attrs:{id:"_6-2-2-追加元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-2-追加元素"}},[t._v("#")]),t._v(" 6.2.2 追加元素")]),t._v(" "),s("p",[t._v("列表是可变的序列对象，列表可以追加元素。")]),t._v(" "),s("ol",[s("li",[t._v("在列表中追加单个元素时，可以使用列表的 append（x）方法。")]),t._v(" "),s("li",[t._v("在列表中追加多个元素时，可以使用加（+）运算符或列表的 extend（t）方法")])]),t._v(" "),s("img",{attrs:{src:a(1064)}}),t._v(" "),s("img",{attrs:{src:a(1065)}}),t._v(" "),s("img",{attrs:{src:a(1066)}}),t._v(" "),s("h4",{attrs:{id:"_6-2-3-插入元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-3-插入元素"}},[t._v("#")]),t._v(" 6.2.3 插入元素")]),t._v(" "),s("p",[t._v("想向列表中插入元素时，可以使用列表的"),s("code",[t._v("list.insert（i，x）")]),t._v("方法，其中，"),s("code",[t._v("i指定索引位置")]),t._v("，"),s("code",[t._v("x是要插入的元素")]),t._v("。\n"),s("img",{attrs:{src:a(1067)}})]),t._v(" "),s("h4",{attrs:{id:"_6-2-4-替换元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-4-替换元素"}},[t._v("#")]),t._v(" 6.2.4 替换元素")]),t._v(" "),s("p",[t._v("想替换列表中的元素时，将列表下标索引元素放在赋值符号（=）的左边，进行赋值即可。\n"),s("img",{attrs:{src:a(1068)}})]),t._v(" "),s("h4",{attrs:{id:"_6-2-5-删除元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-5-删除元素"}},[t._v("#")]),t._v(" 6.2.5 删除元素")]),t._v(" "),s("p",[t._v("想在列表中删除元素时，可使用列表的 list.remove（x）方法，如果找到匹配的元素 x，则删除该元素，如果找到多个匹配的元素，则只删除第一个匹配的元素\n"),s("img",{attrs:{src:a(1069)}})]),t._v(" "),s("h4",{attrs:{id:"_6-3-元组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-元组"}},[t._v("#")]),t._v(" 6.3 元组")]),t._v(" "),s("p",[t._v("元组（tuple）是一种不可变序列类型。")]),t._v(" "),s("h4",{attrs:{id:"_6-3-1-创建元组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-1-创建元组"}},[t._v("#")]),t._v(" 6.3.1 创建元组")]),t._v(" "),s("p",[t._v("创建元组时有两种方法。")]),t._v(" "),s("ol",[s("li",[t._v("tuple（iterable）函数：参数 iterable 是可迭代对象（字符串、列表、元组、集合和字典等）。")]),t._v(" "),s("li",[t._v("（元素 1，元素 2，元素 3，⋯）：指定具体的元组元素，元素之间以逗号分隔。对于元组元素，可以使用小括号括起来，也可以省略小括号。")])]),t._v(" "),s("img",{attrs:{src:a(1070)}}),t._v(" "),s("h4",{attrs:{id:"_6-3-2-元组拆包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-2-元组拆包"}},[t._v("#")]),t._v(" 6.3.2 元组拆包")]),t._v(" "),s("p",[t._v("创建元组，并将多个数据放到元组中，这个过程被称为"),s("code",[t._v("元组打包")]),t._v("。与元组打包相反的操作是"),s("code",[t._v("拆包")]),t._v("，就是"),s("code",[t._v("将元组中的元素取出，分别赋值给不同的变量")]),t._v("。"),s("br"),t._v(" "),s("img",{attrs:{src:a(1071)}}),t._v(" "),s("img",{attrs:{src:a(1072)}})]),t._v(" "),s("h4",{attrs:{id:"_6-4-集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-集合"}},[t._v("#")]),t._v(" 6.4 集合")]),t._v(" "),s("p",[t._v("集合（set）是一种可迭代的、无序的、不能包含重复元素的容器类型的数据。")]),t._v(" "),s("h5",{attrs:{id:"_6-4-1-创建集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-1-创建集合"}},[t._v("#")]),t._v(" 6.4.1 创建集合")]),t._v(" "),s("p",[t._v("序列中的元素是有序的; 集合中的元素是无序的，但元素不能重复。\n我们可以通过以下两种方式创建集合。")]),t._v(" "),s("ol",[s("li",[t._v("set（iterable）函数：参数 iterable 是可迭代对象（字符串、列表、元组、集合和字典等）。")]),t._v(" "),s("li",[t._v("{元素 1，元素 2，元素 3，⋯}：指定具体的集合元素，元素之间以逗号分隔。对于集合元素，需要使用大括号括起来。")])]),t._v(" "),s("img",{attrs:{src:a(1073)}}),t._v(" "),s("h5",{attrs:{id:"_6-4-2-修改集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-2-修改集合"}},[t._v("#")]),t._v(" 6.4.2 修改集合")]),t._v(" "),s("ul",[s("li",[t._v("修改集合类似于修改列表，可以向其中插入和删除元素。修改可变集合有如右所示的常用方法。")]),t._v(" "),s("li",[t._v("add（elem）：添加元素，如果元素已经存在，则不能添加，不会抛出错误。")]),t._v(" "),s("li",[t._v("remove（elem）：删除元素，如果元素不存在，则抛出错误。")]),t._v(" "),s("li",[t._v("clear（）：清除集合")])]),t._v(" "),s("img",{attrs:{src:a(1074)}}),t._v(" "),s("h5",{attrs:{id:"_6-5-字典"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-字典"}},[t._v("#")]),t._v(" 6.5 字典")]),t._v(" "),s("ul",[s("li",[t._v("字典（dict）是可迭代的、通过键（key）来访问元素的可变的容器类型的数据。")]),t._v(" "),s("li",[t._v("字典由两部分视图构成：键视图和值视图。键视图不能包含重复的元素，值视图能。在键视图中，键和值是成对出现的。")])]),t._v(" "),s("img",{attrs:{src:a(1075)}})])}),[],!1,null,null,null);s.default=r.exports},375:function(t,s,a){t.exports=a.p+"assets/img/35.71727e51.png"}}]);