(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{1179:function(s,t,e){"use strict";e.r(t);var r=e(2),a=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"模块化的基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化的基本概念"}},[s._v("#")]),s._v(" 模块化的基本概念")]),s._v(" "),t("h3",{attrs:{id:"什么是模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是模块化"}},[s._v("#")]),s._v(" 什么是模块化")]),s._v(" "),t("p",[s._v("编程领域中的模块化，就是"),t("code",[s._v("遵守固定的规则")]),s._v("，把一个大文件拆成"),t("code",[s._v("独立并互相依赖")]),s._v("的"),t("code",[s._v("多个小模块")]),s._v("。"),t("br"),s._v("\n把代码进行模块化拆分的好处："),t("br"),s._v("\n① 提高了代码的"),t("code",[s._v("复用性")]),t("br"),s._v("\n② 提高了代码的"),t("code",[s._v("可维护性")]),t("br"),s._v("\n③ 可以实现"),t("code",[s._v("按需加载")]),t("br")]),s._v(" "),t("h3",{attrs:{id:"模块化规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化规范"}},[s._v("#")]),s._v(" 模块化规范")]),s._v(" "),t("p",[t("code",[s._v("模块化规范")]),s._v("就是对代码进行模块化的拆分与组合时，需要遵守的那些规则。"),t("br"),s._v("\n例如："),t("br"),s._v("\n⚫ 使用什么样的语法格式来"),t("code",[s._v("引用模块")]),t("br"),s._v("\n⚫ 在模块中使用什么样的语法格式"),t("code",[s._v("向外暴露成员")]),t("br"),s._v(" "),t("code",[s._v("模块化规范的好处")]),s._v("：大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，\n利人利己。")]),s._v(" "),t("h1",{attrs:{id:"node-js-中模块的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js-中模块的分类"}},[s._v("#")]),s._v(" Node.js 中模块的分类")]),s._v(" "),t("p",[s._v("Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是："),t("br"),s._v("\n⚫ "),t("code",[s._v("内置模块")]),s._v("（内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）"),t("br"),s._v("\n⚫ "),t("code",[s._v("自定义模块")]),s._v("（用户创建的每个 .js 文件，都是自定义模块）"),t("br"),s._v("\n⚫ "),t("code",[s._v("第三方模块")]),s._v("（由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）"),t("br")]),s._v(" "),t("h3",{attrs:{id:"加载模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载模块"}},[s._v("#")]),s._v(" 加载模块")]),s._v(" "),t("p",[s._v("使用强大的 "),t("code",[s._v("require()")]),s._v(" 方法，可以加载需要的内置模块、用户自定义模块、第三方模块进行使用。例如：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1.加载内置的 fs 模块")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" fs "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fs"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2.加载用户的自定义模块")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" custom "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./custom.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3、加载第三方模块(关于第三方模块的下载和使用，会在后面的课程中进行专门的讲解)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" moment "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"moment"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("注意:使用 require()方法加载其它模块时，会执行被加载模块中的代码。")]),s._v(" "),t("h3",{attrs:{id:"node-js-中的模块作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js-中的模块作用域"}},[s._v("#")]),s._v(" Node.js 中的模块作用域")]),s._v(" "),t("h4",{attrs:{id:"_1、什么是模块作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是模块作用域"}},[s._v("#")]),s._v(" 1、什么是"),t("font",{attrs:{color:"red"}},[s._v("模块作用域")])],1),s._v(" "),t("p",[s._v("和"),t("code",[s._v("函数作用域")]),s._v("类似，在自定义模块中定义的变量、方法等成员，"),t("code",[s._v("只能在当前模块内被访问")]),s._v("，这种"),t("code",[s._v("模块级别的访问限制")]),s._v("，叫做"),t("code",[s._v("模块 作用域")]),s._v("。\n"),t("img",{attrs:{src:e(915)}})]),s._v(" "),t("h4",{attrs:{id:"_2、-模块作用域的好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、-模块作用域的好处"}},[s._v("#")]),s._v(" 2、 模块作用域的好处")]),s._v(" "),t("p",[s._v("防止了全局变量污染的问题\n"),t("img",{attrs:{src:e(916)}})]),s._v(" "),t("h4",{attrs:{id:"_2、向外共享模块作用域中的成员"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、向外共享模块作用域中的成员"}},[s._v("#")]),s._v(" 2、向外共享模块作用域中的成员")]),s._v(" "),t("ol",[t("li",[s._v("module 对象")])]),s._v(" "),t("p",[s._v("在每个 .js 自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息，打印如下：\n"),t("img",{attrs:{src:e(917)}})]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("module.exports 对象\n在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用。"),t("br"),s._v("\n外界用 "),t("code",[s._v("require()")]),s._v(" 方法导入自定义模块时，得到的就是 module.exports 所指向的对象"),t("br"),s._v("\n使用 require() 方法导入模块时，导入的结果，永远以 module.exports 指向的对象为准"),t("br")])]),s._v(" "),t("li",[t("p",[s._v("exports 对象\n由于 module.exports 单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了 exports 对象。默认情况\n下，"),t("code",[s._v("exports 和 module.exports 指向同一个对象")]),s._v("。最终共享的结果，还是以 module.exports 指向的对象为准")]),s._v(" "),t("img",{attrs:{src:e(918)}})]),s._v(" "),t("li",[t("p",[s._v("exports 和 module.exports 的使用误区\n时刻谨记，require() 模块时，得到的永远是 module.exports 指向的对象：\n"),t("img",{attrs:{src:e(919)}}),s._v("\n注意：为了防止混乱，建议大家不要在同一个模块中同时使用 exports 和 module.exports")])])]),s._v(" "),t("h4",{attrs:{id:"_3、-node-js-中的模块化规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、-node-js-中的模块化规范"}},[s._v("#")]),s._v(" 3、 Node.js 中的模块化规范")]),s._v(" "),t("p",[s._v("Node.js 遵循了 CommonJS 模块化规范，CommonJS 规定了"),t("code",[s._v("模块的特性")]),s._v("和"),t("code",[s._v("各模块之间如何相互依赖")]),s._v("。\nCommonJS 规定：\n① 每个模块内部，"),t("code",[s._v("module 变量")]),s._v("代表当前模块。\n② module 变量是一个对象，它的 exports 属性（即"),t("code",[s._v("module.exports）是对外的接口")]),s._v("。\n③ 加载某个模块，其实是加载该模块的 module.exports 属性。"),t("code",[s._v("require() 方法用于加载模块")]),s._v("。")]),s._v(" "),t("h1",{attrs:{id:"模块的加载机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块的加载机制"}},[s._v("#")]),s._v(" 模块的加载机制")]),s._v(" "),t("h3",{attrs:{id:"_1、优先从缓存中加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、优先从缓存中加载"}},[s._v("#")]),s._v(" 1、优先从缓存中加载")]),s._v(" "),t("p",[t("code",[s._v("模块在第一次加载后会被缓存")]),s._v("。 这也意味着多次调用 require() 不会导致模块的代码被执行多次。\n注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而"),t("code",[s._v("提高模块的加载效率")])]),s._v(" "),t("h3",{attrs:{id:"_2、-内置模块的加载机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、-内置模块的加载机制"}},[s._v("#")]),s._v(" 2、 内置模块的加载机制")]),s._v(" "),t("p",[s._v("内置模块是由 Node.js 官方提供的模块，"),t("code",[s._v("内置模块的加载优先级最高")]),s._v("。\n例如，require('fs') 始终返回内置的 fs 模块，即使在 node_modules 目录下有名字相同的包也叫做 fs。")]),s._v(" "),t("h3",{attrs:{id:"_3、自定义模块的加载机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、自定义模块的加载机制"}},[s._v("#")]),s._v(" 3、自定义模块的加载机制")]),s._v(" "),t("p",[s._v("使用 require() 加载自定义模块时，必须指定以 ./ 或 ../ 开头的路径标识符。在加载自定义模块时，如果没有指定 ./ 或 ../\n这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。"),t("br"),s._v("\n同时，在使用 require() 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件："),t("br"),s._v("\n① 按照确切的文件名进行加载"),t("br"),s._v("\n② 补全 .js 扩展名进行加载"),t("br"),s._v("\n③ 补全 .json 扩展名进行加载"),t("br"),s._v("\n④ 补全 .node 扩展名进行加载"),t("br"),s._v("\n⑤ 加载失败，终端报错"),t("br")]),s._v(" "),t("h3",{attrs:{id:"_4、第三方模块的加载机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、第三方模块的加载机制"}},[s._v("#")]),s._v(" 4、第三方模块的加载机制")]),s._v(" "),t("p",[s._v("如果传递给 require() 的模块标识符不是一个内置模块，也没有以 ‘./’ 或 ‘../’ 开头，则 Node.js 会从当前模块的父\n目录开始，尝试从 /node_modules 文件夹中加载第三方模块。"),t("br"),s._v("\n如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。"),t("br"),s._v("\n例如，假设在 'C:\\Users\\itheima\\project\\foo.js' 文件里调用了 require('tools')，则 Node.js 会按以下顺序查找："),t("br"),s._v("\n① C:\\Users\\itheima\\project\\node_modules\\tools"),t("br"),s._v("\n② C:\\Users\\itheima\\node_modules\\tools"),t("br"),s._v("\n③ C:\\Users\\node_modules\\tools"),t("br"),s._v("\n④ C:\\node_modules\\tools"),t("br")]),s._v(" "),t("h3",{attrs:{id:"_5、目录作为模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、目录作为模块"}},[s._v("#")]),s._v(" 5、目录作为模块")]),s._v(" "),t("p",[s._v("当把目录作为模块标识符，传递给 require() 进行加载的时候，有三种加载方式："),t("br"),s._v("\n① 在被加载的目录下查找一个叫做 package.json 的文件，并寻找 main 属性，作为 require() 加载的入口"),t("br"),s._v("\n② 如果目录里没有 package.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件。"),t("br"),s._v("\n③ 如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error: Cannot find module 'xxx'"),t("br")])])}),[],!1,null,null,null);t.default=a.exports},915:function(s,t,e){s.exports=e.p+"assets/img/7.64efbb40.png"},916:function(s,t,e){s.exports=e.p+"assets/img/8.2ea8000c.png"},917:function(s,t,e){s.exports=e.p+"assets/img/9.14ca531e.png"},918:function(s,t,e){s.exports=e.p+"assets/img/10.b8f27de1.png"},919:function(s,t,e){s.exports=e.p+"assets/img/11.3288cf57.png"}}]);